<?php

/*
 * Generated by CRUDigniter v3.0 Beta 
 * www.crudigniter.com
 */

class Administration_employee extends CI_Controller {

    function __construct() {
        parent::__construct();
        $this->load->model('Administration_employee_model');
        $this->load->helper(array("datatable"));
    }

    /*
     * Listing of administration_employees
     */

    function index() {
        $data['_view'] = 'administration_employee/index';
        $this->load->view('layouts/main', $data);
    }

    /**
     * Function to get all admin employees
     * 
     * @return json result
     */
    function getAllAdminEmployees() {
        $request = $_GET;
        $result = $this->Administration_employee_model->get_all_administration_employees($request, array());
        echo json_encode($result);
        exit;
    }

    /*
     * Adding a new administration_employee
     */

    function add() {
        $this->load->library('form_validation');

        $this->form_validation->set_rules('IC_NO', 'IC NO', 'required');
        $this->form_validation->set_rules('STAFF_NO', 'STAFF NO', 'required');
        $this->form_validation->set_rules('EMP_NAME', 'EMP NAME', 'required');
        $this->form_validation->set_rules('EMAIL_ID', 'EMAIL ID', 'valid_email');
        $this->form_validation->set_rules('PHONE_NO', 'PHONE NO', 'numeric');
        $this->form_validation->set_rules('MOBILE_NO', 'MOBILE NO', 'numeric');
        $this->form_validation->set_rules('CLIENT_ID', 'CLIENT ID', 'required');

        if ($this->form_validation->run()) {
            $params = array(
                'EMP_NAME' => $this->input->post('EMP_NAME'),
                'CLIENT_ID' => $this->input->post('CLIENT_ID'),
                'IS_ACTIVE' => $this->input->post('IS_ACTIVE'),
                'CREATED_DATE' => $this->input->post('CREATED_DATE'),
                'CREATED_BY' => $this->input->post('CREATED_BY'),
                'MODIFIED_DATE' => $this->input->post('MODIFIED_DATE'),
                'MODIFIED_BY' => $this->input->post('MODIFIED_BY'),
                'IC_NO' => $this->input->post('IC_NO'),
                'STAFF_NO' => $this->input->post('STAFF_NO'),
                'ADDRESS' => $this->input->post('ADDRESS'),
                'MOBILE_NO' => $this->input->post('MOBILE_NO'),
                'PHONE_NO' => $this->input->post('PHONE_NO'),
                'EMAIL_ID' => $this->input->post('EMAIL_ID'),
                'GENDER' => $this->input->post('GENDER'),
                'DESIGNATION_ID' => $this->input->post('DESIGNATION_ID'),
                'ACTIVE_STATUS' => $this->input->post('ACTIVE_STATUS'),
                'BASIC_SALARY' => $this->input->post('BASIC_SALARY'),
                'LANGUAGE' => $this->input->post('LANGUAGE'),
                'EMPLOYEE_PIC_PATH' => $this->input->post('EMPLOYEE_PIC_PATH'),
                'VIEW_OTHER_BRANCH_DETAILS' => $this->input->post('VIEW_OTHER_BRANCH_DETAILS'),
                'MULTIPLE_LOGINS' => $this->input->post('MULTIPLE_LOGINS'),
                'ROLE_ID' => $this->input->post('ROLE_ID'),
            );

            $administration_employee_id = $this->Administration_employee_model->add_administration_employee($params);
            redirect('administration_employee/index');
        } else {
            $this->load->model('Client_info_model');
            $data['all_client_info'] = $this->Client_info_model->get_all_client_info();

            $this->load->model('Administration_designation_model');
            $data['all_administration_designation'] = $this->Administration_designation_model->get_all_administration_designation_data();

            $data['_view'] = 'administration_employee/add';
            $this->load->view('layouts/main', $data);
        }
    }

    /*
     * Editing a administration_employee
     */

    function edit($EMP_ID) {
        // check if the administration_employee exists before trying to edit it
        $data['administration_employee'] = $this->Administration_employee_model->get_administration_employee($EMP_ID);

        if (isset($data['administration_employee']['EMP_ID'])) {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('IC_NO', 'IC NO', 'required');
            $this->form_validation->set_rules('STAFF_NO', 'STAFF NO', 'required');
            $this->form_validation->set_rules('EMP_NAME', 'EMP NAME', 'required');
            $this->form_validation->set_rules('EMAIL_ID', 'EMAIL ID', 'valid_email');
            $this->form_validation->set_rules('PHONE_NO', 'PHONE NO', 'numeric');
            $this->form_validation->set_rules('MOBILE_NO', 'MOBILE NO', 'numeric');
            $this->form_validation->set_rules('CLIENT_ID', 'CLIENT ID', 'required');

            if ($this->form_validation->run()) {
                $params = array(
                    'EMP_NAME' => $this->input->post('EMP_NAME'),
                    'CLIENT_ID' => $this->input->post('CLIENT_ID'),
                    'IS_ACTIVE' => $this->input->post('IS_ACTIVE'),
                    'CREATED_DATE' => $this->input->post('CREATED_DATE'),
                    'CREATED_BY' => $this->input->post('CREATED_BY'),
                    'MODIFIED_DATE' => $this->input->post('MODIFIED_DATE'),
                    'MODIFIED_BY' => $this->input->post('MODIFIED_BY'),
                    'IC_NO' => $this->input->post('IC_NO'),
                    'STAFF_NO' => $this->input->post('STAFF_NO'),
                    'ADDRESS' => $this->input->post('ADDRESS'),
                    'MOBILE_NO' => $this->input->post('MOBILE_NO'),
                    'PHONE_NO' => $this->input->post('PHONE_NO'),
                    'EMAIL_ID' => $this->input->post('EMAIL_ID'),
                    'GENDER' => $this->input->post('GENDER'),
                    'DESIGNATION_ID' => $this->input->post('DESIGNATION_ID'),
                    'ACTIVE_STATUS' => $this->input->post('ACTIVE_STATUS'),
                    'BASIC_SALARY' => $this->input->post('BASIC_SALARY'),
                    'LANGUAGE' => $this->input->post('LANGUAGE'),
                    'EMPLOYEE_PIC_PATH' => $this->input->post('EMPLOYEE_PIC_PATH'),
                    'VIEW_OTHER_BRANCH_DETAILS' => $this->input->post('VIEW_OTHER_BRANCH_DETAILS'),
                    'MULTIPLE_LOGINS' => $this->input->post('MULTIPLE_LOGINS'),
                    'ROLE_ID' => $this->input->post('ROLE_ID'),
                );

                $this->Administration_employee_model->update_administration_employee($EMP_ID, $params);
                redirect('administration_employee/index');
            } else {
                $this->load->model('Client_info_model');
                $data['all_client_info'] = $this->Client_info_model->get_all_client_info();

                $this->load->model('Administration_designation_model');
                $data['all_administration_designation'] = $this->Administration_designation_model->get_all_administration_designation_data();

                $data['_view'] = 'administration_employee/edit';
                $this->load->view('layouts/main', $data);
            }
        } else
            show_error('The administration_employee you are trying to edit does not exist.');
    }

    /*
     * Deleting administration_employee
     */

    function remove($EMP_ID) {
        $administration_employee = $this->Administration_employee_model->get_administration_employee($EMP_ID);

        // check if the administration_employee exists before trying to delete it
        if (isset($administration_employee['EMP_ID'])) {
            $this->Administration_employee_model->delete_administration_employee($EMP_ID);
            redirect('administration_employee/index');
        } else
            show_error('The administration_employee you are trying to delete does not exist.');
    }

}
