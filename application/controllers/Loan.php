<?php
/* 
 * Generated by CRUDigniter v3.0 Beta 
 * www.crudigniter.com
 */
 
class Loan extends CI_Controller
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Loan_model');
        $this->load->model('Customer_detail_model');
    } 

    /*
     * Listing of loans
     */
    function index()
    {
    	
		$this->load->model('Masters_loan_pay_term_model');
		$data['all_masters_loan_pay_terms'] = $this->Masters_loan_pay_term_model->get_all_masters_loan_pay_terms();
    	$data['all_customers'] = $this->Customer_detail_model->get_all_customer_details();
    	//print_r($data['all_customers']);exit;
    	if(isset($_POST['customer_id'])){
    		$customer_id=$_POST['customer_id'];
    	}else{
    		$customer_id=$data['all_customers']['0']['CUSTOMER_ID'];
    	}
    	    		$data['customer_id']=$customer_id;

    	    	$data['loans'] = $this->Loan_model->getLoanByCustomerId($customer_id);
    	$data['customer_detail'] = $this->Customer_detail_model->get_customer_detail($customer_id);
//echo "<pre>";print_r($data['customer_detail']);exit;
        $data['_view'] = 'loan/index';
        $this->load->view('layouts/main',$data);
	}

    function getAllLoansByCustId(){
    	$customer_id =$this->uri->segment(1);
    	echo $customer_id;exit;
    	$data['loans'] = $this->Loan_model->getLoanByCustomerId($customer_id);
    	$data['all_customers'] = $this->Customer_detail_model->get_all_customer_details();
        $data['_view'] = 'loan/index';
        $this->load->view('layouts/main',$data);
	}
    /*
     * Adding a new loan
     */
    function add()
    {   
        $this->load->library('form_validation');

		//$this->form_validation->set_rules('customer_id','Customer Id','required');
		$this->form_validation->set_rules('applied_amount','Applied Amount','decimal|greater_than[0]');
		$this->form_validation->set_rules('approved_amount','Approved Amount','greater_than[0]|decimal');
		$this->form_validation->set_rules('loan_type','Loan Type','required');
		$this->form_validation->set_rules('processing_fees','Processing Fees','decimal|greater_than[0]');
		$this->form_validation->set_rules('staming_charges','Staming Charges','greater_than[0]|decimal');
		$this->form_validation->set_rules('filing_charges','Filing Charges','decimal|greater_than[0]');
		$this->form_validation->set_rules('other_chargers','Other Chargers','decimal|greater_than[0]');
		$this->form_validation->set_rules('loan_application_no','Loan Application No','alpha_numeric');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'applied_amount' => $this->input->post('applied_amount'),
				'approved_rejected' => $this->input->post('approved_rejected'),
				'approved_rejected_date' => $this->input->post('approved_rejected_date'),
				'approved_amount' => $this->input->post('approved_amount'),
				'fixed_running' => $this->input->post('fixed_running'),
				'fixed_interest' => $this->input->post('fixed_interest'),
				'processing_fees' => $this->input->post('processing_fees'),
				'staming_charges' => $this->input->post('staming_charges'),
				'filing_charges' => $this->input->post('filing_charges'),
				'other_chargers' => $this->input->post('other_chargers'),
				'due_date' => $this->input->post('due_date'),
				'new_due_date' => $this->input->post('new_due_date'),
				'loan_application_no' => $this->input->post('loan_application_no'),
				'client_id' => $this->input->post('client_id'),
				'created_by' => $this->input->post('created_by'),
				'created_on' => $this->input->post('created_on'),
				'modified_by' => $this->input->post('modified_by'),
				'modified_on' => $this->input->post('modified_on'),
				'customer_id' => $this->input->post('customer_id'),
				'loan_type' => $this->input->post('loan_type'),
				'loan_duration' => $this->input->post('loan_duration'),
            );
            
            $loan_id = $this->Loan_model->add_loan($params);
            redirect('loan/index');
        }
        else
        {

			/*$this->load->model('Customer_detail_model');
			$data['all_customer_details'] = $this->Customer_detail_model->get_all_customer_details();

			$this->load->model('Masters_loan_pay_term_model');
			$data['all_masters_loan_pay_terms'] = $this->Masters_loan_pay_term_model->get_all_masters_loan_pay_terms();
            
            $this->load->view('loan/add',$data);
*/
            $customer_id =$this->uri->segment(3);
	    	//echo $customer_id;exit;
	    	$data['loans'] = $this->Loan_model->getLoanByCustomerId($customer_id);
	    	$data['customer_detail'] = $this->Customer_detail_model->get_customer_detail($customer_id);
	    	
			$this->load->model('Masters_loan_pay_term_model');
			$data['all_masters_loan_pay_terms'] = $this->Masters_loan_pay_term_model->get_all_masters_loan_pay_terms();
	    	$data['all_customers'] = $this->Customer_detail_model->get_all_customer_details();
	        
        }
    }  

    /*
     * Editing a loan
     */
    function edit($loan_id)
    {   
        // check if the loan exists before trying to edit it
        $data['loan'] = $this->Loan_model->get_loan($loan_id);
        
        if(isset($data['loan']['loan_id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('customer_id','Customer Id','required');
			$this->form_validation->set_rules('applied_amount','Applied Amount','decimal|greater_than[0]');
			$this->form_validation->set_rules('approved_amount','Approved Amount','greater_than[0]|decimal');
			$this->form_validation->set_rules('loan_type','Loan Type','required');
			$this->form_validation->set_rules('processing_fees','Processing Fees','decimal|greater_than[0]');
			$this->form_validation->set_rules('staming_charges','Staming Charges','greater_than[0]|decimal');
			$this->form_validation->set_rules('filing_charges','Filing Charges','decimal|greater_than[0]');
			$this->form_validation->set_rules('other_chargers','Other Chargers','decimal|greater_than[0]');
			$this->form_validation->set_rules('loan_application_no','Loan Application No','alpha_numeric');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'applied_amount' => $this->input->post('applied_amount'),
					'approved_rejected' => $this->input->post('approved_rejected'),
					'approved_rejected_date' => $this->input->post('approved_rejected_date'),
					'approved_amount' => $this->input->post('approved_amount'),
					'fixed_running' => $this->input->post('fixed_running'),
					'fixed_interest' => $this->input->post('fixed_interest'),
					'processing_fees' => $this->input->post('processing_fees'),
					'staming_charges' => $this->input->post('staming_charges'),
					'filing_charges' => $this->input->post('filing_charges'),
					'other_chargers' => $this->input->post('other_chargers'),
					'due_date' => $this->input->post('due_date'),
					'new_due_date' => $this->input->post('new_due_date'),
					'loan_application_no' => $this->input->post('loan_application_no'),
					'client_id' => $this->input->post('client_id'),
					'created_by' => $this->input->post('created_by'),
					'created_on' => $this->input->post('created_on'),
					'modified_by' => $this->input->post('modified_by'),
					'modified_on' => $this->input->post('modified_on'),
					'customer_id' => $this->input->post('customer_id'),
					'loan_type' => $this->input->post('loan_type'),
					'loan_duration' => $this->input->post('loan_duration'),
                );

                $this->Loan_model->update_loan($loan_id,$params);            
                redirect('loan/index');
            }
            else
            {
				$this->load->model('Customer_detail_model');
				$data['all_customer_details'] = $this->Customer_detail_model->get_all_customer_details();

				$this->load->model('Masters_loan_pay_term_model');
				$data['all_masters_loan_pay_terms'] = $this->Masters_loan_pay_term_model->get_all_masters_loan_pay_terms();

                $this->load->view('loan/edit',$data);
            }
        }
        else
            show_error('The loan you are trying to edit does not exist.');
    } 

    /*
     * Deleting loan
     */
    function remove($loan_id)
    {
        $loan = $this->Loan_model->get_loan($loan_id);

        // check if the loan exists before trying to delete it
        if(isset($loan['loan_id']))
        {
            $this->Loan_model->delete_loan($loan_id);
            redirect('loan/index');
        }
        else
            show_error('The loan you are trying to delete does not exist.');
    }
    
}
