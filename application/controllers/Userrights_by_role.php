<?php
/* 
 * Generated by CRUDigniter v3.0 Beta 
 * www.crudigniter.com
 */
 
class Userrights_by_role extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Userrights_by_role_model');
    } 

    /*
     * Listing of userrights_by_roles
     */
    function index()
    {
        $data['userrights_by_roles'] = $this->Userrights_by_role_model->get_all_userrights_by_roles();

        $data['_view'] = 'userrights_by_role/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new userrights_by_role
     */
    function add()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
				'FORM_ID' => $this->input->post('FORM_ID'),
				'FORM_VIEW' => $this->input->post('FORM_VIEW'),
				'FORM_ADD' => $this->input->post('FORM_ADD'),
				'FORM_EDIT' => $this->input->post('FORM_EDIT'),
				'FORM_DELETE' => $this->input->post('FORM_DELETE'),
				'FORM_REPORT' => $this->input->post('FORM_REPORT'),
				'ROLE_ID' => $this->input->post('ROLE_ID'),
				'IS_ACTIVE' => $this->input->post('IS_ACTIVE'),
				'CREATED_BY' => $this->input->post('CREATED_BY'),
				'CREATED_DATE' => $this->input->post('CREATED_DATE'),
				'MODIFIED_BY' => $this->input->post('MODIFIED_BY'),
				'MODIFIED_DATE' => $this->input->post('MODIFIED_DATE'),
            );
            
            $userrights_by_role_id = $this->Userrights_by_role_model->add_userrights_by_role($params);
            redirect('userrights_by_role/index');
        }
        else
        {            
            $data['_view'] = 'userrights_by_role/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a userrights_by_role
     */
    function edit($UR_ID)
    {   
        // check if the userrights_by_role exists before trying to edit it
        $data['userrights_by_role'] = $this->Userrights_by_role_model->get_userrights_by_role($UR_ID);
        
        if(isset($data['userrights_by_role']['UR_ID']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					'FORM_ID' => $this->input->post('FORM_ID'),
					'FORM_VIEW' => $this->input->post('FORM_VIEW'),
					'FORM_ADD' => $this->input->post('FORM_ADD'),
					'FORM_EDIT' => $this->input->post('FORM_EDIT'),
					'FORM_DELETE' => $this->input->post('FORM_DELETE'),
					'FORM_REPORT' => $this->input->post('FORM_REPORT'),
					'ROLE_ID' => $this->input->post('ROLE_ID'),
					'IS_ACTIVE' => $this->input->post('IS_ACTIVE'),
					'CREATED_BY' => $this->input->post('CREATED_BY'),
					'CREATED_DATE' => $this->input->post('CREATED_DATE'),
					'MODIFIED_BY' => $this->input->post('MODIFIED_BY'),
					'MODIFIED_DATE' => $this->input->post('MODIFIED_DATE'),
                );

                $this->Userrights_by_role_model->update_userrights_by_role($UR_ID,$params);            
                redirect('userrights_by_role/index');
            }
            else
            {
                $data['_view'] = 'userrights_by_role/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The userrights_by_role you are trying to edit does not exist.');
    } 

    /*
     * Deleting userrights_by_role
     */
    function remove($UR_ID)
    {
        $userrights_by_role = $this->Userrights_by_role_model->get_userrights_by_role($UR_ID);

        // check if the userrights_by_role exists before trying to delete it
        if(isset($userrights_by_role['UR_ID']))
        {
            $this->Userrights_by_role_model->delete_userrights_by_role($UR_ID);
            redirect('userrights_by_role/index');
        }
        else
            show_error('The userrights_by_role you are trying to delete does not exist.');
    }
    
}
