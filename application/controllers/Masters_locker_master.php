<?php

/*
 * Generated by CRUDigniter v3.0 Beta 
 * www.crudigniter.com
 */

class Masters_locker_master extends CI_Controller {

    function __construct() {
        parent::__construct();
        $this->load->model('Masters_locker_master_model');
        $this->load->model('Client_info_model');
        $session_data = (isset($this->session->userdata['EMP_DATA']) && !empty($this->session->userdata['EMP_DATA'])) ? $this->session->userdata['EMP_DATA'] : array();
        if (empty($session_data))
            redirect("login");
    }

    /*
     * Listing of masters_locker_master
     */

    function index() {
        $data['masters_locker_master'] = $this->Masters_locker_master_model->get_all_masters_locker_master();

        $data['_view'] = 'masters_locker_master/index';
        $this->load->view('layouts/main', $data);
    }

    /**
     * Function to get all masters locker master data
     * 
     * @return json result
     */
    function getAllMastersLockerMaster() {
        $request = $_GET;
        $result = $this->Masters_locker_master_model->getAllMastersLockerMasterData($request, array());
        echo json_encode($result);
        exit;
    }

    /*
     * Adding a new masters_locker_master
     */

    function add() {
        if (isset($_POST) && count($_POST) > 0) {
            $params = array(
                'LOCKER_STORAGE_BOX_NAME' => $this->input->post('LOCKER_STORAGE_BOX_NAME'),
                'IS_OCCUPIED' => $this->input->post('IS_OCCUPIED'),
                'CREATED_DATE' => date("Y-m-d H:i:s"),
                'CREATED_BY' => $this->session->userdata['EMP_DATA']['EMP_ID'],
                'IS_ACTIVE' => 1,
            );

            $masters_locker_master_id = $this->Masters_locker_master_model->add_masters_locker_master($params);
            redirect('masters_locker_master/index');
        } else {
            $data['all_client_info'] = $this->Client_info_model->get_all_client_info();
            $data['_view'] = 'masters_locker_master/add';
            $this->load->view('layouts/main', $data);
        }
    }

    /*
     * Editing a masters_locker_master
     */

    function edit($LOCKER_ID) {
        // check if the masters_locker_master exists before trying to edit it
        $data['masters_locker_master'] = $this->Masters_locker_master_model->get_masters_locker_master($LOCKER_ID);

        if (isset($data['masters_locker_master']['LOCKER_ID'])) {
            if (isset($_POST) && count($_POST) > 0) {
                $params = array(
                    'LOCKER_STORAGE_BOX_NAME' => $this->input->post('LOCKER_STORAGE_BOX_NAME'),
                    'IS_OCCUPIED' => $this->input->post('IS_OCCUPIED'),
                    'MODIFIED_DATE' => date("Y-m-d H:i:s"),
                    'MODIFIED_BY' => $this->session->userdata['EMP_DATA']['EMP_ID'],
                    'IS_ACTIVE' => 1,
                );

                $this->Masters_locker_master_model->update_masters_locker_master($LOCKER_ID, $params);
                redirect('masters_locker_master/index');
            } else {
                $data['all_client_info'] = $this->Client_info_model->get_all_client_info();
                $data['_view'] = 'masters_locker_master/edit';
                $this->load->view('layouts/main', $data);
            }
        } else
            show_error('The masters_locker_master you are trying to edit does not exist.');
    }

    /*
     * Deleting masters_locker_master
     */

    function remove($LOCKER_ID) {
        $masters_locker_master = $this->Masters_locker_master_model->get_masters_locker_master($LOCKER_ID);

        // check if the masters_locker_master exists before trying to delete it
        if (isset($masters_locker_master['LOCKER_ID'])) {
            $this->Masters_locker_master_model->delete_masters_locker_master($LOCKER_ID);
            redirect('masters_locker_master/index');
        } else
            show_error('The masters_locker_master you are trying to delete does not exist.');
    }

}
