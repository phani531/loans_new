<?php

/*
 * Generated by CRUDigniter v3.0 Beta 
 * www.crudigniter.com
 */

class Customer_detail_model extends CI_Model {

    function __construct() {
        parent::__construct();
    }

    /**
     * Function to get all customer detail data 
     * 
     * @param array $request
     * @param array $user_data
     * 
     * @return array result
     */
    function get_all_customer_details_data($request, $user_data = array()) {
        try {
            $sql_details = array('user' => $this->db->username, 'pass' => $this->db->password, 'db' => $this->db->database, 'host' => $this->db->hostname);
            $request['searchcolumns'] = array();

            $columns = array(
                array(
                    'db' => 'CUSTOMER_ID',
                    'dt' => 'DT_RowId',
                    'formatter' => function( $d, $row ) {
                        return 'row_' . $d;
                    }
                ),
                array('db' => 'CUSTOMER_ID',
                    'dt' => 0,
                    'formatter' => function($d, $row) {
                        return !empty($d) ? $d : "N/A";
                    }
                ),
                array('db' => 'CUSTOMER_NAME',
                    'dt' => 1,
                    'formatter' => function($d, $row) {
                        return !empty($d) ? $d : "N/A";
                    }
                ),
                array('db' => 'CUSTOMER_IDNO',
                    'dt' => 2,
                    'formatter' => function($d, $row) {
                        return $d;
                    }
                ),
                array('db' => 'EMAIL_ID',
                    'dt' => 3,
                    'formatter' => function($d, $row) {
                        return $d;
                    }
                ),
                array(
                    'db' => 'CUSTOMER_ID',
                    'dt' => 4,
                    'formatter' => function($d, $row) {
                        $returnString = "";
                        $returnString .= '<a href="' . site_url('customer_detail/add/' . $row['CUSTOMER_ID']) . '" class="btn btn-info btn-xs"><span class="fa fa-pencil"></span> Edit</a>&nbsp;&nbsp;';
                        $returnString .= '<a data-href="' . site_url('customer_detail/remove/') . '" data-table-name="cust_profile_table" data-id=' . $row["CUSTOMER_ID"] . ' data-desc="You will be perminently deleting this customer." data-message= "Are you sure to delete?" class="btn btn-danger btn-xs delete-row"><span class="fa fa-trash"></span> Delete</a>';
                        return $returnString;
                    }
                )
            );

            $join = "";
            $where = "";

            $query_columns_array = array("CUSTOMER_ID", "CUSTOMER_NAME", "CUSTOMER_IDNO", "EMAIL_ID");

            $custom_where = array();
            $where .= " WHERE IS_ACTIVE = 1 AND CREATED_BY = " . $this->session->userdata["EMP_DATA"]['EMP_ID'];
            $custom_where_string = (count($custom_where) > 0) ? implode(" AND ", array_unique($custom_where)) : "";
            $request['custom_where'] = $custom_where_string;
            $query_columns = implode(",", array_unique($query_columns_array));
            $sql_query = 'SELECT $query_columns from customer_details cd' . $join . $where;
            $result = datatable::simple($request, $sql_details, $sql_query, $query_columns, $columns);
            $start = $_REQUEST['start'];
            foreach ($result['data'] as &$res) {
                $start++;
                $res[0] = $start;
            }
            return $result;
        } catch (Exception $e) {
            log_message("Error : ", $this->db->_error_message());
            return fasle;
        }
    }

    /*
     * Get customer_detail by CUSTOMER_ID
     */

    function get_customer_detail($CUSTOMER_ID) {
        return $this->db->get_where('customer_details', array('CUSTOMER_ID' => $CUSTOMER_ID, "IS_ACTIVE" => 1))->row_array();
    }

    /**
     * Function to get customer address
     * 
     * @param int $CUSTOMER_ID
     * 
     * @return array result
     */
    function get_address_detail($CUSTOMER_ID) {
        return $this->db->get_where('customer_address', array('CUSTOMER_ID' => $CUSTOMER_ID, "IS_ACTIVE" => 1))->result_array();
    }

    /**
     * Function to get customer address
     * 
     * @param int $CUSTOMER_ID
     * 
     * @return array result
     */
    function get_reference_detail($CUSTOMER_ID) {
        return $this->db->get_where('customer_reference', array('CUSTOMER_ID' => $CUSTOMER_ID, "IS_ACTIVE" => 1))->result_array();
    }

    /*
     * Get all customer_details
     */

    function get_all_customer_details() {
        return $this->db->where(array("IS_ACTIVE" => 1))->get('customer_details')->result_array();
    }

    /*
     * function to add new customer_detail
     */

    function add_customer_detail($insert_data) {
        try {
            $this->db->trans_begin();

            if (isset($insert_data['customer_profile']['id']) && $insert_data['customer_profile']['id'] != "" && $insert_data['customer_profile']['id'] != 0) {
                $customer_id = $insert_data['customer_profile']['id'];
                $update_data = $insert_data;
                unset($update_data['customer_profile']['id']);
                $this->db->where(array("CUSTOMER_ID" => $insert_data['customer_profile']['id']))->update('customer_details', $update_data['customer_profile']);
                $this->db->where(array("CUSTOMER_ID" => $insert_data['customer_profile']['id']))->update('customer_address', array("IS_ACTIVE" => 0));
                $this->db->where(array("CUSTOMER_ID" => $insert_data['customer_profile']['id']))->update('customer_reference', array("IS_ACTIVE" => 0));
            } else {
                $this->db->insert('customer_details', $insert_data['customer_profile']);
                $customer_id = $this->db->insert_id();
            }
            foreach ($insert_data['customer_address'] as $key => $value):
                $insert_data['customer_address'][$key]['CUSTOMER_ID'] = $customer_id;
            endforeach;
            foreach ($insert_data['customer_reference'] as $key => $value):
                $insert_data['customer_reference'][$key]['CUSTOMER_ID'] = $customer_id;
            endforeach;
            $this->db->insert_batch('customer_address', $insert_data['customer_address']);
            $this->db->insert_batch('customer_reference', $insert_data['customer_reference']);

            if (isset($insert_data['file_data']) && count($insert_data['file_data']) > 0) {
                foreach ($insert_data['file_data'] as $key => $value):
                    $insert_data['file_data'][$key]['CUSTOMER_ID'] = $customer_id;
                endforeach;
                $this->db->insert_batch('customer_doc_checklist', $insert_data['file_data']);
            }

            if ($this->db->trans_status() == TRUE) {
                $this->db->trans_commit();
                return true;
            } else {
                $this->db->trans_rollback();
                return false;
            }
        } catch (Exception $e) {
            log_message("Insertion of customer details failed.");
            $this->db->trans_rollback();
            return false;
        }
    }

    function save_customer_address_detail() {
        
    }

    /*
     * function to update customer_detail
     */

    function update_customer_detail($CUSTOMER_ID, $params) {
        $this->db->where('CUSTOMER_ID', $CUSTOMER_ID);
        $response = $this->db->update('customer_details', $params);
        if ($response) {
            return "customer_detail updated successfully";
        } else {
            return "Error occuring while updating customer_detail";
        }
    }

    /*
     * function to delete customer_detail
     */

    function delete_customer_detail($CUSTOMER_ID) {
        try {
            $this->db->trans_begin();
            $this->db->where(array("CUSTOMER_ID" => $CUSTOMER_ID))->update('customer_details', array('IS_ACTIVE' => 0));
            $this->db->where(array("CUSTOMER_ID" => $CUSTOMER_ID))->update('customer_address', array('IS_ACTIVE' => 0));
            $this->db->where(array("CUSTOMER_ID" => $CUSTOMER_ID))->update('customer_reference', array('IS_ACTIVE' => 0));
            $this->db->where(array("CUSTOMER_ID" => $CUSTOMER_ID))->update('customer_doc_checklist', array('IS_ACTIVE' => 0));
            if ($this->db->trans_status() == TRUE) {
                $this->db->trans_commit();
                return true;
            } else {
                $this->db->trans_rollback();
                return false;
            }
        } catch (Exception $e) {
            log_message("Error", "Deletion failed");
            $this->db->trans_rollback();
            return false;
        }
    }

}
