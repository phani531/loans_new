<?php

/*
 * Generated by CRUDigniter v3.0 Beta 
 * www.crudigniter.com
 */

class Masters_storage_fee_model extends CI_Model {

    function __construct() {
        parent::__construct();
    }

    /**
     * Function to get all masters document data
     * 
     * @param type $request
     * @param type $user_data
     * 
     * @return type
     */
    function getAllMastersStorageFeeData($request, $user_data) {
        try {
            $sql_details = array('user' => $this->db->username, 'pass' => $this->db->password, 'db' => $this->db->database, 'host' => $this->db->hostname);
            $request['searchcolumns'] = array();

            $columns = array(
                array(
                    'db' => 'STORAGE_ID',
                    'dt' => 'DT_RowId',
                    'formatter' => function( $d, $row ) {
                        return 'row_' . $d;
                    }
                ),
                array('db' => 'STORAGE_ID',
                    'dt' => 0,
                    'formatter' => function($d, $row) {
                        return !empty($d) ? $d : "N/A";
                    }
                ),
                array('db' => 'STORAGE_CHARGE',
                    'dt' => 1,
                    'formatter' => function($d, $row) {
                        return !empty($d) ? $d : "N/A";
                    }
                ),
                array('db' => 'STORAGE_ID',
                    'dt' => 2,
                    'formatter' => function($d, $row) {
                        $returnString = "";
                        $returnString .= '<a href="' . site_url('masters_storage_fee/edit/' . $row['STORAGE_ID']) . '" class="btn btn-info btn-xs"><span class="fa fa-pencil"></span> Edit</a><br>';
                        $returnString .= '<a href="' . site_url('masters_storage_fee/remove/' . $row['STORAGE_ID']) . '" class="btn btn-danger btn-xs"><span class="fa fa-trash"></span> Delete</a>';
                        return $returnString;
                    }
                )
            );

            $join = "";
            $where = "";

            $query_columns_array = array("STORAGE_ID, STORAGE_CHARGE");

            $custom_where = array();
            $where .= " WHERE CREATED_BY = " . $_SESSION['user']['LOGIN_ID'] . " AND   IS_ACTIVE = 1";
            $custom_where_string = (count($custom_where) > 0) ? implode(" AND ", array_unique($custom_where)) : "";
            $request['custom_where'] = $custom_where_string;
            $query_columns = implode(",", array_unique($query_columns_array));
            $sql_query = 'SELECT $query_columns from masters_storage_fee' . $join . $where;
            $result = datatable::simple($request, $sql_details, $sql_query, $query_columns, $columns);
            $start = $_REQUEST['start'];
            return $result;
        } catch (Exception $e) {
            log_message("Error : ", $this->db->_error_message());
            return fasle;
        }
    }

    /*
     * Get masters_storage_fee by STORAGE_ID
     */

    function get_masters_storage_fee($STORAGE_ID) {
        return $this->db->get_where('masters_storage_fee', array('STORAGE_ID' => $STORAGE_ID))->row_array();
    }

    /*
     * Get all masters_storage_fee
     */

    function get_all_masters_storage_fee() {
        return $this->db->get('masters_storage_fee')->result_array();
    }

    /*
     * function to add new masters_storage_fee
     */

    function add_masters_storage_fee($params) {
        $this->db->insert('masters_storage_fee', $params);
        return $this->db->insert_id();
    }

    /*
     * function to update masters_storage_fee
     */

    function update_masters_storage_fee($STORAGE_ID, $params) {
        $this->db->where('STORAGE_ID', $STORAGE_ID);
        $response = $this->db->update('masters_storage_fee', $params);
        if ($response) {
            return "masters_storage_fee updated successfully";
        } else {
            return "Error occuring while updating masters_storage_fee";
        }
    }

    /*
     * function to delete masters_storage_fee
     */

    function delete_masters_storage_fee($STORAGE_ID) {
        $response = $this->db->delete('masters_storage_fee', array('STORAGE_ID' => $STORAGE_ID));
        if ($response) {
            return "masters_storage_fee deleted successfully";
        } else {
            return "Error occuring while deleting masters_storage_fee";
        }
    }

}
